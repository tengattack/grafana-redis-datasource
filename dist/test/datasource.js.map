{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","db","jsonData","redis_url","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","display_status","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","$$status","result","$$config","config","interpolated","target","mapToTextValue","_","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.db = { 'url' : instanceSettings.jsonData.redis_url }\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    query.db = this.db\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      data : { db : this.db },\n      method: 'POST',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: response.data.status, message: response.data.message, title: response.data.display_status };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      response.data.$$status = result.status;\n      response.data.$$config = result.config;\n    return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, '')\n        };\n    interpolated.db = this.db\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove place holder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, ''),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'table'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}